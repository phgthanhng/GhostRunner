Classes Setup:
// This is just a Template Structure for the classes, it would make it easier for all of us if the Classes are interconnected so I created this so we're all in
// the same page

// set the bg, sprite and bgMusic as "template.(png, jpg, wav, mp3)" for the time being, we'll decide the assets later
	World:
		Splash Screen
			FIELDS
			- private : GreenfootImage bg => sets the sprite for the character
			---------------------------------------------------------------------------------------------------------------------------------------------------
			METHODS
			- public : Constructor SplashScreen() => sets the background image
			- public : act() => calls the transitionToMainMenu() method
			- private : transitionToMainMenu() => delay for 3 seconds, then set world to a Main Menu instance
		Main Menu
			FIELDS
			- private : GreenfootImage bg => sets the background image
			- private : GreenfootSound bgMusic => sets the background music of this world
			---------------------------------------------------------------------------------------------------------------------------------------------------
			METHODS
			- public : Constructor MainMenu() => sets the background image and plays the background music
			- public : prepare() => adds a selector object at the first option
			- public : act() => calls the transitionToAnotherWorld() method
			- private : transitionToAnotherWorld() => if the selector is at the designated coordinates the option and pressed enter, stop the background music
								  and set the world to a Levels instance or a How to Play instance
		How to Play
			FIELDS
			- private : GreenfootImage bg => sets the background image
			- private : GreenfootSound bgMusic => sets the background music of this world
			---------------------------------------------------------------------------------------------------------------------------------------------------
			METHODS
			- public : Constructor MainMenu() => sets the background image and plays the background music
			- public : act() => call transitionToMainMenu()
			- private : transitionToMainMenu() => if escape key is pressed, stop background music and sets the world to a MainMenu instance
		Levels
			FIELDS
			- private : GreenfootImage bg => sets the background image
			- private : GreenfootSound bgMusic => sets the background music of this world
			---------------------------------------------------------------------------------------------------------------------------------------------------
			- public : Constructor MainMenu() => sets the background image and plays the background music
			- public : prepare() => add objects in specific location to create the map, can be done using Save the World setting
			- public : act() => calls the transitionToAnotherWorld() method
			- private : transitionToAnotherWorld => if there's no MainCharacter object in the Levels instance, stop the background music and set the world to a
								Game Lose instance, else if this object intersects an exit object, set the world to a Game Win instance
		Game Win
			FIELDS
			- private : GreenfootImage bg => sets the background image
			- private : GreenfootSound bgMusic => sets the background music of this world
			---------------------------------------------------------------------------------------------------------------------------------------------------
			- public : Constructor MainMenu() => sets the background image and plays the background music
			- public : prepare() => adds a selector object at the first option
			- public : act() => calls the transitionToAnotherWorld() method
			- private : transitionToAnotherWorld() => if the selector is at the designated coordinates the option and pressed enter, stop the background music
								  and set the world to a Level1 instance or a MainMenu instance
		Game Lose
			FIELDS
			- private : GreenfootImage bg => sets the background image
			- private : GreenfootSound bgMusic => sets the background music of this world
			---------------------------------------------------------------------------------------------------------------------------------------------------
			- public : Constructor MainMenu() => sets the background image and plays the background music
			- public : prepare() => adds a selector object at the first option
			- public : act() => calls the transitionToAnotherWorld() method
			- private : transitionToAnotherWorld() => if the selector is at the designated coordinates the option and pressed enter, stop the background music
								  and set the world to a previous Level's instance or a MainMenu instance
		
	Actor:
		Non-Trivial:
			Selector
				FIELDS
				- private : GreenfootImage sprite => sets the sprite for the character
				// You only need to use the constructor on these that sets up the select1.X, select1.Y, select2.X, select2.Y
				- private : Integer array select1 => contains (x, y) of the 1st option for checking if the option is selected for later
				- private : Integer array select2 => contains (x, y) of the 2nd option for checking if the option is selected for later
				------------------------------------------------------------------------------------------------------------------------------------------
				METHODS
				- public : Constructor Selector() => sets the image and the coordinates for select1 and select2
				- public : getSelect1X() => returns the X-coordinate of select1
				- public : getSelect1Y() => returns the Y-coordinate of select1
				- public : getSelect2X() => returns the X-coordinate of select2
				- public : getSelect2Y() => returns the Y-coordinate of select2
				- public : act() => implements the movement of the Selector object, you can change the default "right" and "left" to "up" and "down" if necessary
			Main Character
				FIELDS
				- private : GreenfootImage sprite => sets the sprite for the character
				- public : Boolean(static) isPoweredUP => (maybe implemented later) if TRUE, bomb can damage Ghosts objects
				-------------------------------------------------------------------------------------------------------------------------------------------
				METHODS
				- public : Constructor Selector() => sets the image
				- public : Constructor MainCharacter() => sets the image
				- public : act() => calls the movement() method, a createBomb() method, and a isTouchingGhost method 
				- private : movement() => implements the movement of the MainCharacter object, it would be prefereable to be implemented in a way that the object
						doesn't turn because the sprite would turn too and that would look bad
				- private : createBomb() => implements the creation of Bomb objects, if "space" is pressed, a Bomb object would be created at the character's feet
						  (probably implemented later)
				- private : isTouchingGhost => check if the MainCharacter object intersects with any object of the Ghosts class, if yes, remove the current object
						     (syntax should be "getWorld().removeObject(this)")
			Ghosts
				FIELDS
				- private : GreenfootImage sprite => sets the sprite for the character
				- private : Integer(final) defaultX => default starting X location of the object
				- private : Integer(final) defaultY => default starting Y location of the object
				-------------------------------------------------------------------------------------------------------------------------------------------
				METHODS
				- public : Constructor Selector() => sets the image
				- public : Constructor MainCharacter() => sets the image
				- public : act() => calls the movement() method(AI), if(MainCharacter.isPoweredUp), call destructible() method, then respawn(probably 
					   implemented later) method
				- private : movement() => uses a simple AI to track to the player, we can probably use an algorithm from the internet
				- private : destructible() => what happens if the player gets the power up; if touching a Bomb object, delay for 5 seconds then create a new Ghosts 
						    object at default location and removes this object 
				- private : respawn() => way of respawning to the default location, probably use the constructor to getX() and getY() at start and set a final private
					       field to store it, then create a new Ghosts object at that location (probably implemented later)
			Bomb + Explosion
				FIELDS
				- private : GreenfootImage sprite => sets the sprite for the character
				- private : GreenfootSound soundFX => sets the sound effects when it explodes
				-------------------------------------------------------------------------------------------------------------------------------------------
				METHODS
				- public : Constructor Selector() => sets the image
				- public : Constructor MainCharacter() => sets the image
				- public : act() => calls the explode() method
				- private : explode() => implements a way of setting the image to an exploding bomb sprite, delay for a second, set the image to blank, then set the 
					       image to fire, then create objects at (x--, y), (x++, y), (x, y--), (x, y++) up until it's touching a Wall type class 
			Breakable Walls : Subclass of general Wall class
				FIELDS
				- private : GreenfootImage sprite => sets the sprite for the character
				-------------------------------------------------------------------------------------------------------------------------------------------
				METHODS
				- public : Constructor MainCharacter() => sets the image
				- public : act() => calls the breaking() method
				- private : breaking() => implements what happens when in contact with a bomb, delay for a second then if touching a Bomb object, call isLucky() 
						method(probably implemented later), then remove this object
				- private : isLucky() => implements the chance of spawning a Power Up object in place
				
		Trivial:
			Unbreakable Walls : Subclass of general Wall class
				FIELDS
				- private : GreenfootImage sprite => sets the sprite for the character
				-------------------------------------------------------------------------------------------------------------------------------------------
				METHODS
				- public : Constructor Selector() => sets the image
			Power Up
				FIELDS
				- private : GreenfootImage sprite => sets the sprite for the character
				-------------------------------------------------------------------------------------------------------------------------------------------
				METHODS
				- public : Constructor Selector() => sets the image
			Exit
				FIELDS
				- private : GreenfootImage sprite => sets the sprite for the character
				-------------------------------------------------------------------------------------------------------------------------------------------
				METHODS
				- public : Constructor Selector() => sets the image
				
	Delay:
		FIELDS
		- private : Integer delayDuration => how long the delay needed to be
		-----------------------------------------------------------------------------------------------------------------------------------------------------------
		METHODS
		- public : Constructor Delay() => sets the delay duration, set start time as the time when the object is created and the end time as start time + 
						  (delayDuration * 1000), then create an empty loop that loops until current time is equal to the end time
